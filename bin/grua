#!/usr/bin/env python

from grua import grua
from grua.deps import calc_deps, sort_containers
from grua.mem import mem
from grua.registry import load_registries
import yaml
import sys
import errno
import os


args = sys.argv[1:]

mem.yaml_path = grua.find_yaml_location()


args2 = args
args = []
mem.quiet = False
for arg in args2:
    if arg.startswith("-:"):
        if arg == "-:q":
            mem.quiet = True
        else:
            raise AssertionError("Unrecognised argument " + arg)
    else:
        args.append(arg)


os.chdir(mem.yaml_path)

with open(mem.yaml_path + "/grua.yaml", 'r') as stream:
    mem.config = yaml.load(stream)
    if mem.config.has_key('global'):
        if mem.config['global'].has_key('project'):
            mem.Project = mem.config['global']['project']
        if mem.config['global'].has_key('volumepath'):
            mem.VolumePath = mem.config['global']['volumepath']
    for container in mem.config:
        calc_deps(container, mem.config)

# set up configuration path
try:
    os.makedirs(mem.ConfigPath + "/" + mem.Project)
except OSError as exc:  # Python >2.5
    if exc.errno == errno.EEXIST and os.path.isdir(mem.ConfigPath + "/" + mem.Project):
        pass
    else:
        raise


mem.sorted_run_deps = sort_containers()

mem.Mode = grua.get_mode()

load_registries()


if len(args) == 0:
    grua.usage()
else:
    try:
        grua.process_command(args)
    except Exception as ex:
        ##print "An unhandled exception occurred: " + e.\
        template = "An exception of type {0} occured. Arguments:\n{1!r} "
        message = template.format(type(ex).__name__, ex.args)
        print
        print "!!!"
        print message
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print "!!!"
        print
        # raise
        sys.exit(99)
